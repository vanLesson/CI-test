# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: ReactNative CI/CD

on:
  push:
    branches:
      - deploy
jobs:
  install-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v1
      - name: Install npm dependencies
        run: |
          npm install
  build-android:
    needs: install-and-test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install npm dependencies
        run: |
          npm install
      - name: Build Android Release
        run: |
          cd android && ./gradlew assembleRelease -PMYAPP_UPLOAD_STORE_PASSWORD='${{ secrets.KEYSTORE_PASSWORD }}' -PMYAPP_UPLOAD_KEY_PASSWORD='${{ secrets.KEYSTORE_PASSWORD }}'
      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        with:
          name: app-release.apk
          path: android/app/build/outputs/apk/release/
  build-ios:
    needs: install-and-test
    runs-on: macos-latest
steps:
  # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
  - uses: actions/checkout@v2
    with:
      ref: testbranch
  # Setup Node JS - 10.17.0
  - name: Set up Node JS 10.17.0
    uses: actions/setup-node@v1
    with:
      node-version: '10.17.0'
  # Clean Packages & Install Dependencies
  - name: Clean Packages
    run: |
      rm -rf node_modules
      npm cache clean --force
      rm -rf package-lock.json
  # Install React Native CLI
  - name: Install React Native CLI
    run: |
      npm install react-native-cli
  # List iOS Devices & Platforms
  - name: List iOS Devices & Platforms
    run: |
      xcrun simctl list
  # Install iOS 11.4 Runtime
  - name: Install iOS 11.4 Runtime
    run: |
      gem install xcode-install
      xcversion simulators --install='iOS 11.4'
  # Create and Boot iOS Emulator - iPhoneX on iOS 11.4, Update default appium config for iOS
  - name: Create and Run iOS Emulator - iPhoneX on iOS 11.4, Update default appium config for iOS
    run: |
      xcrun simctl create TestiPhoneX com.apple.CoreSimulator.SimDeviceType.iPhone-X com.apple.CoreSimulator.SimRuntime.iOS-11-4 > deviceid.txt
      DEVICEUUID=`cat deviceid.txt`
      echo $DEVICEUUID
      sed -i -e "s/{IPHONE_UUID}/$DEVICEUUID/g" __tests__/e2e/template_appium_configs_ios.js
      xcrun simctl boot $DEVICEUUID &
  # Use HTTPS repos
  - name: Use HTTPS repos
    run: |
      git config --global url."https://github".insteadOf ssh://git@github
  # Install Repo and Dependencies
  - name: Install Repo and Dependencies
    run: |
      npm install --save-dev
  # Start the Appium Server
  - name: Start the Appium Server
    run: ./node_modules/.bin/appium --log-timestamp --log-no-colors --allow-insecure chromedriver_autodownload > appium.log &
  # Poll for Appium Server to Start
  - name: Poll for Appium Server to Start
    run: |
      until $(curl --output /dev/null --silent --head --fail http://127.0.0.1:4723/wd/hub/sessions); do
        sleep 5
      done
  # Open Metro Bundler in Background
  - name: Open Metro Bundler in Background
    run: |
      node_modules/react-native/scripts/launchPackager.command &
  # Build iOS App and Run Tests
  - name: Build iOS App and Run Tests
    env:
      E2E_TEST_PLATFORM: 'ios'
      E2E_TEST_DEFAULTS: 'true'
      E2E_TEST_TAGS: 'E2E'
    run: |
      react-native run-ios
      BUILT_APP=`find ~/Library/Developer/Xcode/DerivedData -name <APP_NAME>.app | grep Build/Products/Debug-iphonesimulator/<APP_NAME>.app`
      mkdir -p ios/build/<APP_NAME>/Build/Products/Debug-iphonesimulator
      cp -R $BUILT_APP ios/build/<APP_NAME>/Build/Products/Debug-iphonesimulator
      sleep 30
      npm run e2e-test
  # Upload Appium Logs
  - name: Upload Appium logs
    uses: actions/upload-artifact@v1
    with:
      name: appium.log
      path: appium.log
  # Upload Test Results
  - name: Upload Test Results
    uses: actions/upload-artifact@v1
    with:
      name: e2e-results
      path: __tests__/e2e/output